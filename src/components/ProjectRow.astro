---
import type { Project } from '../data/projects';

interface Props {
  project: Project;
  index: number;
}

const { project, index } = Astro.props;
const projectNum = (index + 1).toString().padStart(2, '0');

// Function to get YouTube ID from URL
function getYouTubeID(url) {
  if (!url) return null;

  // Handle different YouTube URL formats
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);

  return (match && match[2].length === 11) ? match[2] : null;
}

// Function to get Instagram post ID from URL
function getInstagramID(url) {
  if (!url) return null;
  
  // Handle different Instagram URL formats
  // Format: https://www.instagram.com/p/CnVgPhYP6gs/
  const regExp = /instagram\.com\/p\/([^\/\?]+)/;
  const match = url.match(regExp);
  
  return match ? match[1] : null;
}

// Function to render media items
function renderMediaItems(mediaItems) {
  if (!mediaItems || !mediaItems.length) {
    return `<div class="media-item"></div>`;
  }

  return mediaItems.map(item => {
    if (item.type === 'image') {
      return `<div class="media-item">
        <img src="${item.url}" alt="${item.alt}" loading="lazy" />
      </div>`;
    } else if (item.type === 'video') {
      // Check if it's a YouTube URL
      const youtubeID = getYouTubeID(item.url);

      if (youtubeID) {
        return `<div class="media-item youtube-container">
          <iframe
            width="100%"
            height="100%"
            src="https://www.youtube.com/embed/${youtubeID}"
            title="${item.alt}"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen>
          </iframe>
        </div>`;
      } else {
        // Regular video file
        return `<div class="media-item">
          <video controls src="${item.url}" title="${item.alt}"></video>
        </div>`;
      }
    } else if (item.type === 'instagram') {
      // Check if it's an Instagram URL
      const instagramID = getInstagramID(item.url);
      
      if (instagramID) {
        return `<div class="media-item instagram-container">
          <iframe
            width="100%"
            height="100%"
            src="https://www.instagram.com/p/${instagramID}/embed"
            title="${item.alt || 'Instagram post'}"
            frameborder="0"
            scrolling="no"
            allowtransparency="true">
          </iframe>
        </div>`;
      } else {
        return `<div class="media-item">Invalid Instagram URL</div>`;
      }
    } else {
      return `<div class="media-item">Unsupported media</div>`;
    }
  }).join('');
}
---

<div class="project-row" data-project={index + 1}>
  <div class="project-number">{projectNum}</div>
  <div class="project-title">{project.title}</div>
  <div class="project-date">{project.year}</div>
</div>
<div class="project-content" id={`project-${index + 1}`}>
  <div class="project-content-inner">
    <div class="project-description">
      <div class="tags">
        {project.tags.map(tag => (
          <span class="tag">{tag}</span>
        ))}
      </div>
      {/* Render each paragraph with proper spacing */}
      {project.description.map((paragraph, i) => (
        <p class={i > 0 ? "mt-4" : ""} set:html={paragraph} />
      ))}

    </div>
    <div class="media-container">
      <div class="media-carousel" set:html={renderMediaItems(project.media)} />
    </div>
  </div>
</div>

<script>
  // Function to handle row click and center scrolling
  document.addEventListener('DOMContentLoaded', () => {
    const projectRows = document.querySelectorAll('.project-row');
    
    projectRows.forEach(row => {
      row.addEventListener('click', function() {
        // Get the project number from the data attribute
        const projectNum = this.getAttribute('data-project');
        const projectContent = document.getElementById(`project-${projectNum}`);
        
        // Toggle active class on the row
        this.classList.toggle('active');
        
        // Toggle the height of the content
        if (projectContent.style.height === '0px' || !projectContent.style.height) {
          // Opening the content
          projectContent.style.height = projectContent.scrollHeight + 'px';
          
          // Wait a small amount of time for the content to expand before scrolling
          setTimeout(() => {
            // Calculate the position to scroll to (centered in viewport)
            const rowRect = this.getBoundingClientRect();
            const contentRect = projectContent.getBoundingClientRect();
            const targetPosition = window.scrollY + rowRect.top - (window.innerHeight / 2) + ((rowRect.height + contentRect.height) / 2);
            
            // Smooth scroll to the position
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }, 50); // Small delay to allow DOM to update
        } else {
          // Closing the content
          // First, scroll back to center on the row itself
          const rowRect = this.getBoundingClientRect();
          const targetPosition = window.scrollY + rowRect.top - (window.innerHeight / 2) + (rowRect.height / 2);
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
          
          // After scrolling, collapse the content with a slight delay
          // This ensures the scroll happens before the collapse
          setTimeout(() => {
            projectContent.style.height = '0px';
          }, 300);
        }
      });
    });
  });
</script>
