---
// Main layout component
import CustomCursor from '../components/CustomCursor.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Add Geist Font via CDN -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/geist-font/dist/geist-sans/style.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/geist-font/dist/geist-mono/style.css">
    
    <title>{title}</title>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
  </head>
  <body>
    <slot />
    <CustomCursor />

    <script>
      // Initialize GSAP animations
      document.addEventListener('DOMContentLoaded', () => {
        // Register GSAP plugins
        gsap.registerPlugin(ScrollTrigger);

        // Header animation
        gsap.to('header', {
          opacity: 1,
          y: 0,
          duration: 1,
          ease: 'power3.out'
        });

        // Project rows animations
        gsap.to('.project-row', {
          opacity: 1,
          y: 0,
          duration: 0.8,
          stagger: 0.2,
          ease: 'power3.out'
        });

        // Scroll animations for project rows
        gsap.utils.toArray('.project-row').forEach((row) => {
          ScrollTrigger.create({
            trigger: row,
            start: 'top 80%',
            onEnter: () => {
              gsap.to(row, {
                opacity: 1,
                y: 0,
                duration: 0.5,
                ease: 'power3.out'
              });
            },
            once: true
          });
        });

        // Initialize project interactions
        initializeProjectInteractions();
      });

      // Handle project row clicks
      function initializeProjectInteractions() {
        const projectRows = document.querySelectorAll('.project-row');
        const closeButtons = document.querySelectorAll('.close-button');

        let activeProject = null;

        projectRows.forEach(row => {
          row.addEventListener('click', () => {
            const projectId = row.getAttribute('data-project');
            const content = document.getElementById(`project-${projectId}`);

            // If this project is already open, close it
            if (activeProject === projectId) {
              closeProject();
              return;
            }

            // If another project is open, close it first
            if (activeProject) {
              closeProject();
            }

            // Open this project
            activeProject = projectId;
            row.classList.add('active');

            // Animate the dividers
            const dividers = document.querySelectorAll('.divider');
            dividers.forEach(div => {
              gsap.to(div, {
                height: '4px',
                duration: 0.3,
                ease: 'power2.inOut'
              });
            });

            // Open the content
            gsap.to(content, {
              height: 'auto',
              duration: 0.5,
              ease: 'power2.inOut'
            });

            // Fade in the content
            gsap.to(content.querySelector('.project-content-inner'), {
              opacity: 1,
              y: 0,
              duration: 0.5,
              delay: 0.2,
              ease: 'power2.out'
            });
          });
        });

        closeButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.stopPropagation();
            closeProject();
          });
        });

        function closeProject() {
          if (!activeProject) return;

          const row = document.querySelector(`.project-row[data-project="${activeProject}"]`);
          const content = document.getElementById(`project-${activeProject}`);

          row.classList.remove('active');

          // Animate the dividers back
          const dividers = document.querySelectorAll('.divider');
          dividers.forEach(div => {
            gsap.to(div, {
              height: '2px',
              duration: 0.3,
              ease: 'power2.inOut'
            });
          });

          // Fade out the content
          gsap.to(content.querySelector('.project-content-inner'), {
            opacity: 0,
            y: -20,
            duration: 0.3,
            ease: 'power2.in'
          });

          // Close the content
          gsap.to(content, {
            height: 0,
            duration: 0.5,
            delay: 0.1,
            ease: 'power2.inOut'
          });

          activeProject = null;
        }
      }
      // Add text magnification effect on project row hover
      const projectRows = document.querySelectorAll('.project-row');

      projectRows.forEach(row => {
        // Set transform origin for each element
        gsap.set(row.querySelector('.project-number'), {
          transformOrigin: "left center" // Scale from left side
        });

        gsap.set(row.querySelector('.project-title'), {
          transformOrigin: "left center" // Scale from left side
        });

        gsap.set(row.querySelector('.project-date'), {
          transformOrigin: "right center" // Scale from right side for the date (since it's on the right)
        });

        const textElements = row.querySelectorAll('.project-title, .project-date');

        // Create magnification animation (but don't play it yet)
        const textMagnify = gsap.to(textElements, {
          scale: 1.1,
          duration: 0.1,
          ease: "back.out(1.7)", // Snappy elastic effect
          stagger: 0.03, // Slight staggered effect between elements
          paused: true
        });

        // Mouse enter - play magnification
        row.addEventListener('mouseenter', () => {
          textMagnify.play();
        });

        // Mouse leave - reverse magnification
        row.addEventListener('mouseleave', () => {
          textMagnify.reverse();
        });
      });
    </script>
  </body>
</html>
